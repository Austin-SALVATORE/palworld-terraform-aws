{
  "version": 4,
  "terraform_version": "1.7.1",
  "serial": 12,
  "lineage": "a0737564-b710-d230-ed11-98c23c4714a6",
  "outputs": {},
  "resources": [
    {
      "module": "module.palworld.module.palworld_backup",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "905418249876",
            "arn": "arn:aws:iam::905418249876:root",
            "id": "905418249876",
            "user_id": "905418249876"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "data",
      "type": "aws_ami",
      "name": "ubuntu",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:eu-west-3::image/ami-00b25a71c7cd9d9d8",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0ad75a4c4bee38de1",
                  "throughput": "0",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "boot_mode": "legacy-bios",
            "creation_date": "2024-01-26T22:11:11.000Z",
            "deprecation_time": "2026-01-26T22:11:11.000Z",
            "description": "Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2024-01-26",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-00b25a71c7cd9d9d8",
            "image_id": "ami-00b25a71c7cd9d9d8",
            "image_location": "amazon/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20240126",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "",
            "include_deprecated": false,
            "kernel_id": "",
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20240126",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0ad75a4c4bee38de1",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "905418249876",
            "arn": "arn:aws:iam::905418249876:root",
            "id": "905418249876",
            "user_id": "905418249876"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "data",
      "type": "aws_region",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "Europe (Paris)",
            "endpoint": "ec2.eu-west-3.amazonaws.com",
            "id": "eu-west-3",
            "name": "eu-west-3"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "data",
      "type": "template_file",
      "name": "user_data_template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "b1848b89bdbdb8a85c6229c37080a80f12cc00f215762bed60592c987399c3ea",
            "rendered": "#!/bin/bash\n\n# Create directories\nmkdir /opt/steam\nmkdir /palworld-server\n\n# Install software\necho \"[INFO] INSTALLING SOFTWARE\"\napt-get update\napt-get install -y curl lib32gcc1 lsof git awscli\n\n# Install steam cmd\necho \"[INFO] DOWNLOADING AND INSTALLING STEAM CMD\"\nwget -P /opt/steam https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\ntar -xzf /opt/steam/steamcmd_linux.tar.gz -C /opt/steam \nchmod 755 /opt/steam/steamcmd.sh\n\n# Create steam user\necho \"[INFO] CREATING STEAM USER\"\nuseradd -m -U steam\nchown -R steam:steam /palworld-server\n\n# Setup the steam cmd command to download Palworld\necho \"[INFO] SETTING UP STEAMCMD INSTALLER TO DOWNLOAD PALWORLD\"\nchown -R steam:steam /opt/steam\ncat \u003c\u003cEOF \u003e /opt/steam/download-palworld.txt\n@NoPromptForPassword 1\nforce_install_dir /palworld-server\nlogin anonymous \napp_update 2394010 validate\nquit\nEOF\n\n# Run steam cmd to download PALWORLD\necho \"[INFO] DOWNLOADING PALWORLD\"\nsudo -u steam /opt/steam/steamcmd.sh +runscript /opt/steam/download-palworld.txt\n\nsudo -u steam mkdir -p /home/steam/.steam/sdk64/\nsudo -u steam /opt/steam/steamcmd.sh +login anonymous +app_update 1007 +quit\n\n# Give steamcmd.sh time to do its magic before trying to copy the files that above command downloads\nsleep 30\n\nsudo -u steam cp /home/steam/Steam/steamapps/common/Steamworks\\ SDK\\ Redist/linux64/steamclient.so /home/steam/.steam/sdk64/\n\n# Install the systemd service file for PALWORLD Dedicated Server\necho \"[INFO] CREATING SYSTEMD SERVICE PALWORLD\"\ncat \u003e /etc/systemd/system/palworld.service \u003c\u003cEOF\n[Unit]\nDescription=Palworld Dedicated Server\nAfter=network.target\n\n[Service]\nType=simple\nLimitNOFILE=10000\nUser=steam\nGroup=steam\nExecStartPre=/opt/steam/steamcmd.sh +runscript /opt/steam/download-palworld.txt\nWorkingDirectory=/palworld-server\nExecStart=/palworld-server/PalServer.sh EpicApp=PalServer\n\nRestart=on-failure\nRestartSec=20s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nif [[ false == \"false\" ]]; then\nmkdir -p /palworld-server/Pal/Saved/Config/LinuxServer/\ncat \u003e /palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini \u003c\u003cEOF\n[/Script/Pal.PalGameWorldSettings]\nOptionSettings=(Difficulty=None,DayTimeSpeedRate=1,NightTimeSpeedRate=1,ExpRate=1,PalCaptureRate=1,PalSpawnNumRate=1,PalDamageRateAttack=1,PalDamageRateDefense=1,PlayerDamageRateAttack=1,PlayerDamageRateDefense=1,PlayerStomachDecreaceRate=1,PlayerStaminaDecreaceRate=1,PlayerAutoHPRegeneRate=1,PlayerAutoHpRegeneRateInSleep=1,PalStomachDecreaceRate=1,PalStaminaDecreaceRate=1,PalAutoHPRegeneRate=1,PalAutoHpRegeneRateInSleep=1,BuildObjectDamageRate=1,BuildObjectDeteriorationDamageRate=1,CollectionDropRate=1,CollectionObjectHpRate=1,CollectionObjectRespawnSpeedRate=1,EnemyDropItemRate=1,DeathPenalty=1,bEnablePlayerToPlayerDamage=false,bEnableFriendlyFire=false,bEnableInvaderEnemy=true,bActiveUNKO=false,bEnableAimAssistPad=true,bEnableAimAssistKeyboard=false,DropItemMaxNum=3000,DropItemMaxNum_UNKO=100,BaseCampMaxNum=128,BaseCampWorkerMaxNum=15,DropItemAliveMaxHours=1,bAutoResetGuildNoOnlinePlayers=false,AutoResetGuildTimeNoOnlinePlayers=72,GuildPlayerMaxNum=20,PalEggDefaultHatchingTime=72,WorkSpeedRate=1,bIsMultiplay=false,bIsPvP=false,bCanPickupOtherGuildDeathPenaltyDrop=false,bEnableNonLoginPenalty=true,bEnableFastTravel=true,bIsStartLocationSelectByMap=false,bExistPlayerAfterLogout=false,bEnableDefenseOtherGuildPlayer=false,CoopPlayerMaxNum=32,ServerPlayerMaxNum=32,ServerName=\"palworld-on-aws\",ServerDescription=\"Running On AWS\",AdminPassword=\"RockwellSucks\",ServerPassword=\"RockwellSucks\",PublicPort=8211,PublicIP=\"\",RCONEnabled=false,RCONPort=\"\",Region=\"\",bUseAuth=true,BanListURL=\"https://api.palworldgame.com/api/banlist.txt\")\nEOF\nfi\n\n# Function for getting palworldsettings from S3\nretrieve_obj_from_s3() {\n  local src=\"$1\"\n  local dst=\"/palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\"\n\n  echo \"[INFO] GETTING PalWorldSettings.ini FROM S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 cp \"$src\" \"$dst\"\n    chown steam:steam /palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\n  fi\n}\n\n# Function for getting palworldsettings from GitHub raw\nretrieve_obj_from_github() {\n  local src=\"$1\"\n  local dst=\"/palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\"\n\n  echo \"[INFO] GETTING palworldsettings.ini FROM GITHUB\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    echo \"[INFO] Copying $src to $dst...\"\n    curl \"$src\" --create-dirs -o \"$dst\"\n    chown steam:steam /palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\n  fi\n}\n\nhandle_palworldsettings() {\n    local use_custom_palworldsettings=\"$1\"\n    local custom_palworldsettings_s3=\"$2\"\n    local custom_palworldsettings_github=\"$3\"\n    local palworldsettings_bucket_arn=\"$4\"\n    local github_url=\"$5\"\n\n    echo \"[INFO] CHECKING FOR CUSTOM palworldsettings.ini OPTIONS\"\n    echo \"[INFO] use_custom_palworldsettings SET TO $use_custom_palworldsettings\"\n    echo \"[INFO] custom_palworldsettings_s3 SET TO $custom_palworldsettings_s3\"\n    echo \"[INFO] custom_palworldsettings_github SET TO $custom_palworldsettings_github\"\n    echo \"[INFO] palworldsettings_bucket_arn SET TO $palworldsettings_bucket_arn\"\n    echo \"[INFO] github_url SET TO $github_url\"\n\n    if [[ $use_custom_palworldsettings == \"true\" ]]; then\n        if [[ $custom_palworldsettings_s3 == \"true\" \u0026\u0026 $custom_palworldsettings_github == \"true\" ]]; then\n            echo \"Error: Both custom_palworldsettings_s3 and custom_palworldsettings_github cannot be true simultaneously.\"\n        elif [[ $custom_palworldsettings_s3 == \"true\" ]]; then\n            echo \"[INFO] custom_palworldsettings_s3 == true\"\n            retrieve_obj_from_s3 \"$palworldsettings_bucket_arn\"\n        elif [[ $custom_palworldsettings_github == \"true\" ]]; then\n            echo \"[INFO] custom_palworldsettings_github == true\"\n            retrieve_obj_from_github \"$github_url\"\n        else\n            echo \"Error: Invalid configuration for use_custom_palworldsettings.\"\n        fi\n    fi\n}\n\n##\n# DONT FORGET TO PARAMETERIZE THE MAP NAME WHEN YOU DO MULTIPLE MAPS!! ##\n#####\n# Function for getting save game files from S3\nretrieve_obj_from_s3_backup_levelData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"/palworld-server/Pal/Saved/SaveGames/0/$2\"\n\n  echo \"[INFO] GETTING LEVEL SAVE BACKUP FILES FROM S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\nretrieve_obj_from_s3_backup_playerData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"/palworld-server/Pal/Saved/SaveGames/0/$2/Players\"\n\n  echo \"[INFO] GETTING SAVE BACKUP FILES FROM S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\nretrieve_obj_from_existing_s3_levelData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"palworld-server/Pal/Saved/SaveGames/0/$2\"\n\n  echo \"[INFO] GETTING SAVE BACKUP FILES FROM USER PROVIDED S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\nretrieve_obj_from_existing_s3_playerData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"/palworld-server/Pal/Saved/SaveGames/0/$2/Players\"\n\n  echo \"[INFO] GETTING SAVE BACKUP FILES FROM USER PROVIDED S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\ncreate_gus(){\n  echo \"[INFO] CREATING GAMEUSERSETTINGS.INI WITH DEDICATED SERVER HASH PROVIDED\"\n  \n  mkdir -p /palworld-server/Pal/Saved/Config/LinuxServer\n\n  cat \u003e /palworld-server/Pal/Saved/Config/LinuxServer/GameUserSettings.ini \u003c\u003cEOG\n[/Script/Pal.PalGameLocalSettings]\nAudioSettings=(Master=0.500000,BGM=1.000000,SE=1.000000,PalVoice=1.000000,HumanVoice=1.000000,Ambient=1.000000,UI=1.000000)\nGraphicsLevel=None\nDefaultGraphicsLevel=None\nbRunedBenchMark=False\nbHasAppliedUserSetting=False\nDedicatedServerName=na\nAntiAliasingType=AAM_TSR\nDLSSMode=Performance\nGraphicsCommonQuality=0\nEOG\n\n}\nhandle_start_from_backup() {\n    local start_from_backup=\"$1\"\n    local backup_files_storage_type=\"$2\"\n    local backup_files_local_path=\"$3\"\n    local backup_files_bootstrap_bucket_name=\"$4\"\n    local existing_backup_files_bootstrap_bucket_name=\"$5\"\n    local dedicatedservername=\"$6\"\n\n    echo \"[INFO] CHECKING FOR START_FROM_BACKUP OPTIONS\"\n    echo \"[INFO] start_from_backup SET TO $start_from_backup\"\n    echo \"[INFO] backup_files_storage_type SET TO $backup_files_storage_type\"\n    echo \"[INFO] backup_files_local_path SET TO $backup_files_local_path\"\n    echo \"[INFO] existing_backup_files_bootstrap_bucket_name SET TO $existing_backup_files_bootstrap_bucket_name\"\n    echo \"[INFO] dedicated_server_name_hash SET TO $dedicatedservername\"\n\n\n    if [[ $start_from_backup == \"true\" ]]; then\n        if [[ $backup_files_storage_type == \"local\" ]]; then\n            echo \"[INFO] backup_files_storage_type == local\"\n            create_gus\n            retrieve_obj_from_s3_backup_levelData \"$backup_files_bootstrap_bucket_name\" \"$dedicatedservername\"\n            retrieve_obj_from_s3_backup_playerData \"$backup_files_bootstrap_bucket_name/Players\" \"$dedicatedservername\"\n        elif [[ $backup_files_storage_type == \"s3\" ]]; then\n            echo \"[INFO] backup_files_storage_type == s3\"\n            create_gus\n            retrieve_obj_from_existing_s3_levelData \"$existing_backup_files_bootstrap_bucket_name\" \"$dedicatedservername\"\n            retrieve_obj_from_existing_s3_playerData \"$existing_backup_files_bootstrap_bucket_name/Players\" \"$dedicatedservername\"\n        else\n            echo \"Error: Invalid configuration for start_from_backup\"\n        fi\n    fi\n}\n\nif [[ false == \"true\" ]]; then\necho \"[INFO] START FROM EXISTING SAVE DATA/BACKUP REQUESTED FOR USE\"\nhandle_start_from_backup false local na na na na\nfi\n\nif [[ false == \"true\" ]]; then\necho \"[INFO] CUSTOM palworldsettings.INI REQUESTED FOR USE\"\nhandle_palworldsettings false false false na \nfi\n\n\nchown -R steam:steam /palworld-server/Pal/Saved\nchmod -R 775 /palworld-server/Pal/Saved\n# Upload custom palworldsettings.ini if user has use_custom_palworldsettings true and game_user_settings_ini_path defined\n# # \n# Start and enable the PALWORLD service\nsystemctl daemon-reload\necho \"[INFO] ENABLING PALWORLD.SERVICE\"\nsystemctl enable palworld\necho \"[INFO] STARTING PALWORLD.SERVICE\"\nsystemctl start palworld\n\nif [[ false == \"true\" ]]; then\necho \"[INFO] S3 BBACKUPS ENABLED. CREATING /palworld-server/palworld_backup_script.sh\"\ncat \u003e /palworld-server/palworld_backup_script.sh \u003c\u003cEOD\n#!/bin/bash\n\n# Backup variables\nDIR_TO_BACKUP=\"/palworld-server/Pal/Saved/SaveGames\"\nGUS_BACKUP=\"/palworld-server/Pal/Saved/Config/LinuxServer/GameUserSettings.ini\"\nS3_BUCKET_NAME=\"\"\n\ngenerate_timestamp() {\ndate '+%Y-%m-%d-%H-%M-%S'\n}\n\nTIMESTAMP=\"\\$(generate_timestamp)\"\nBACKUP_FILENAME=\"palworld-on-aws_backup_\"\\$TIMESTAMP\".tar.gz\"\n\n# Create backup\necho \"[INFO] Creating palworld Backup\"\ntar -zcvf \"\\$BACKUP_FILENAME\" \"\\$DIR_TO_BACKUP\"\n\n# Upload backup to S3\necho \"[INFO] Uploading palworld Backup to s3\"\naws s3 cp \"\\$BACKUP_FILENAME\" s3://\"\\$S3_BUCKET_NAME\"/\naws s3 cp \"\\$GUS_BACKUP\" s3://\"\\$S3_BUCKET_NAME\"/\n\n# Remove local backup file\necho \"[INFO] Removing Local palworld Backup File\"\nrm \"\\$BACKUP_FILENAME\"\nEOD\n\nchmod +x /palworld-server/palworld_backup_script.sh\n\n(crontab -l -u steam 2\u003e/dev/null; echo \" /palworld-server/palworld_backup_script.sh \u003e\u003e /palworld-server/palworld_backup_log.log 2\u003e\u00261\") | crontab -u steam -\nfi\n",
            "template": "#!/bin/bash\n\n# Create directories\nmkdir /opt/steam\nmkdir /palworld-server\n\n# Install software\necho \"[INFO] INSTALLING SOFTWARE\"\napt-get update\napt-get install -y curl lib32gcc1 lsof git awscli\n\n# Install steam cmd\necho \"[INFO] DOWNLOADING AND INSTALLING STEAM CMD\"\nwget -P /opt/steam https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\ntar -xzf /opt/steam/steamcmd_linux.tar.gz -C /opt/steam \nchmod 755 /opt/steam/steamcmd.sh\n\n# Create steam user\necho \"[INFO] CREATING STEAM USER\"\nuseradd -m -U steam\nchown -R steam:steam /palworld-server\n\n# Setup the steam cmd command to download Palworld\necho \"[INFO] SETTING UP STEAMCMD INSTALLER TO DOWNLOAD PALWORLD\"\nchown -R steam:steam /opt/steam\ncat \u003c\u003cEOF \u003e /opt/steam/download-palworld.txt\n@NoPromptForPassword 1\nforce_install_dir /palworld-server\nlogin anonymous \napp_update 2394010 validate\nquit\nEOF\n\n# Run steam cmd to download PALWORLD\necho \"[INFO] DOWNLOADING PALWORLD\"\nsudo -u steam /opt/steam/steamcmd.sh +runscript /opt/steam/download-palworld.txt\n\nsudo -u steam mkdir -p /home/steam/.steam/sdk64/\nsudo -u steam /opt/steam/steamcmd.sh +login anonymous +app_update 1007 +quit\n\n# Give steamcmd.sh time to do its magic before trying to copy the files that above command downloads\nsleep 30\n\nsudo -u steam cp /home/steam/Steam/steamapps/common/Steamworks\\ SDK\\ Redist/linux64/steamclient.so /home/steam/.steam/sdk64/\n\n# Install the systemd service file for PALWORLD Dedicated Server\necho \"[INFO] CREATING SYSTEMD SERVICE PALWORLD\"\ncat \u003e /etc/systemd/system/palworld.service \u003c\u003cEOF\n[Unit]\nDescription=Palworld Dedicated Server\nAfter=network.target\n\n[Service]\nType=simple\nLimitNOFILE=10000\nUser=steam\nGroup=steam\nExecStartPre=/opt/steam/steamcmd.sh +runscript /opt/steam/download-palworld.txt\nWorkingDirectory=/palworld-server\nExecStart=/palworld-server/PalServer.sh EpicApp=PalServer\n\nRestart=on-failure\nRestartSec=20s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nif [[ ${use_custom_palworldsettings} == \"false\" ]]; then\nmkdir -p /palworld-server/Pal/Saved/Config/LinuxServer/\ncat \u003e /palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini \u003c\u003cEOF\n[/Script/Pal.PalGameWorldSettings]\nOptionSettings=(Difficulty=${difficulty},DayTimeSpeedRate=${day_time_speed_rate},NightTimeSpeedRate=${night_time_speed_rate},ExpRate=${exp_rate},PalCaptureRate=${pal_capture_rate},PalSpawnNumRate=${pal_spawn_num_rate},PalDamageRateAttack=${pal_damage_rate_attack},PalDamageRateDefense=${pal_damage_rate_defense},PlayerDamageRateAttack=${player_damage_rate_attack},PlayerDamageRateDefense=${player_damage_rate_defense},PlayerStomachDecreaceRate=${player_stomach_decrease_rate},PlayerStaminaDecreaceRate=${player_stamina_decrease_rate},PlayerAutoHPRegeneRate=${player_auto_hp_regen_rate},PlayerAutoHpRegeneRateInSleep=${player_auto_hp_regen_rate_in_sleep},PalStomachDecreaceRate=${pal_stomach_decrease_rate},PalStaminaDecreaceRate=${pal_stamina_decrease_rate},PalAutoHPRegeneRate=${pal_auto_hp_regen_rate},PalAutoHpRegeneRateInSleep=${pal_auto_hp_regene_rate_in_sleep},BuildObjectDamageRate=${build_object_damage_rate},BuildObjectDeteriorationDamageRate=${build_object_deterioration_damage_rate},CollectionDropRate=${collection_drop_rate},CollectionObjectHpRate=${collection_object_hp_rate},CollectionObjectRespawnSpeedRate=${collection_object_respawn_speed_rate},EnemyDropItemRate=${enemy_drop_item_rate},DeathPenalty=${death_penalty},bEnablePlayerToPlayerDamage=${enable_player_to_player_damage},bEnableFriendlyFire=${enable_friendly_fire},bEnableInvaderEnemy=${enable_invader_enemy},bActiveUNKO=${active_unko},bEnableAimAssistPad=${enable_aim_assist_pad},bEnableAimAssistKeyboard=${enable_aim_assist_keyboard},DropItemMaxNum=${drop_item_max_num},DropItemMaxNum_UNKO=${drop_item_max_num_unko},BaseCampMaxNum=${base_camp_max_num},BaseCampWorkerMaxNum=${base_camp_worker_max_num},DropItemAliveMaxHours=${drop_item_alive_max_hours},bAutoResetGuildNoOnlinePlayers=${auto_reset_guild_no_online_players},AutoResetGuildTimeNoOnlinePlayers=${auto_reset_guild_time_no_online_players},GuildPlayerMaxNum=${guild_player_max_num},PalEggDefaultHatchingTime=${pal_egg_default_hatching_time},WorkSpeedRate=${work_speed_rate},bIsMultiplay=${is_multiplay},bIsPvP=${is_pvp},bCanPickupOtherGuildDeathPenaltyDrop=${can_pickup_other_guild_death_penalty_drop},bEnableNonLoginPenalty=${enable_non_login_penalty},bEnableFastTravel=${enable_fast_travel},bIsStartLocationSelectByMap=${is_start_location_select_by_map},bExistPlayerAfterLogout=${exist_player_after_logout},bEnableDefenseOtherGuildPlayer=${enable_defense_other_guild_player},CoopPlayerMaxNum=${coop_player_max_num},ServerPlayerMaxNum=${server_player_max_num},ServerName=\"${server_name}\",ServerDescription=\"${server_description}\",%{ if admin_password != \"\" ~}AdminPassword=\"${admin_password}\",%{ else ~}AdminPassword=\"\",%{ endif ~}%{ if server_password != \"\" ~}ServerPassword=\"${server_password}\",%{ else ~}ServerPassword=\"\",%{ endif ~}PublicPort=${public_port},%{ if public_ip != \"\" ~}PublicIP=\"${public_ip}\",%{ else ~}PublicIP=\"\",%{ endif ~}RCONEnabled=${enable_rcon},%{ if rcon_port != \"\" ~}RCONPort=${rcon_port},%{ else ~}RCONPort=\"\",%{ endif ~}%{ if region != \"\" ~}Region=\"${region}\",%{ else ~}Region=\"\",%{ endif ~}bUseAuth=${use_auth},BanListURL=\"${ban_list_url}\")\nEOF\nfi\n\n# Function for getting palworldsettings from S3\nretrieve_obj_from_s3() {\n  local src=\"$1\"\n  local dst=\"/palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\"\n\n  echo \"[INFO] GETTING PalWorldSettings.ini FROM S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 cp \"$src\" \"$dst\"\n    chown steam:steam /palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\n  fi\n}\n\n# Function for getting palworldsettings from GitHub raw\nretrieve_obj_from_github() {\n  local src=\"$1\"\n  local dst=\"/palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\"\n\n  echo \"[INFO] GETTING palworldsettings.ini FROM GITHUB\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    echo \"[INFO] Copying $src to $dst...\"\n    curl \"$src\" --create-dirs -o \"$dst\"\n    chown steam:steam /palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini\n  fi\n}\n\nhandle_palworldsettings() {\n    local use_custom_palworldsettings=\"$1\"\n    local custom_palworldsettings_s3=\"$2\"\n    local custom_palworldsettings_github=\"$3\"\n    local palworldsettings_bucket_arn=\"$4\"\n    local github_url=\"$5\"\n\n    echo \"[INFO] CHECKING FOR CUSTOM palworldsettings.ini OPTIONS\"\n    echo \"[INFO] use_custom_palworldsettings SET TO $use_custom_palworldsettings\"\n    echo \"[INFO] custom_palworldsettings_s3 SET TO $custom_palworldsettings_s3\"\n    echo \"[INFO] custom_palworldsettings_github SET TO $custom_palworldsettings_github\"\n    echo \"[INFO] palworldsettings_bucket_arn SET TO $palworldsettings_bucket_arn\"\n    echo \"[INFO] github_url SET TO $github_url\"\n\n    if [[ $use_custom_palworldsettings == \"true\" ]]; then\n        if [[ $custom_palworldsettings_s3 == \"true\" \u0026\u0026 $custom_palworldsettings_github == \"true\" ]]; then\n            echo \"Error: Both custom_palworldsettings_s3 and custom_palworldsettings_github cannot be true simultaneously.\"\n        elif [[ $custom_palworldsettings_s3 == \"true\" ]]; then\n            echo \"[INFO] custom_palworldsettings_s3 == true\"\n            retrieve_obj_from_s3 \"$palworldsettings_bucket_arn\"\n        elif [[ $custom_palworldsettings_github == \"true\" ]]; then\n            echo \"[INFO] custom_palworldsettings_github == true\"\n            retrieve_obj_from_github \"$github_url\"\n        else\n            echo \"Error: Invalid configuration for use_custom_palworldsettings.\"\n        fi\n    fi\n}\n\n##\n# DONT FORGET TO PARAMETERIZE THE MAP NAME WHEN YOU DO MULTIPLE MAPS!! ##\n#####\n# Function for getting save game files from S3\nretrieve_obj_from_s3_backup_levelData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"/palworld-server/Pal/Saved/SaveGames/0/$2\"\n\n  echo \"[INFO] GETTING LEVEL SAVE BACKUP FILES FROM S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\nretrieve_obj_from_s3_backup_playerData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"/palworld-server/Pal/Saved/SaveGames/0/$2/Players\"\n\n  echo \"[INFO] GETTING SAVE BACKUP FILES FROM S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\nretrieve_obj_from_existing_s3_levelData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"palworld-server/Pal/Saved/SaveGames/0/$2\"\n\n  echo \"[INFO] GETTING SAVE BACKUP FILES FROM USER PROVIDED S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\nretrieve_obj_from_existing_s3_playerData() {\n  local src=\"$1\"\n  local dedicatedservername=\"$2\"\n  local dst=\"/palworld-server/Pal/Saved/SaveGames/0/$2/Players\"\n\n  echo \"[INFO] GETTING SAVE BACKUP FILES FROM USER PROVIDED S3\"\n\n  if [[ \"$src\" == \"\" ]]; then\n    echo \"[ERROR] Did not detect a valid path.\"\n    exit_script 10\n  else\n    mkdir -p \"$dst\"\n    echo \"[INFO] Copying $src to $dst...\"\n    aws s3 sync \"$src\" \"$dst\"\n  fi\n}\n\ncreate_gus(){\n  echo \"[INFO] CREATING GAMEUSERSETTINGS.INI WITH DEDICATED SERVER HASH PROVIDED\"\n  \n  mkdir -p /palworld-server/Pal/Saved/Config/LinuxServer\n\n  cat \u003e /palworld-server/Pal/Saved/Config/LinuxServer/GameUserSettings.ini \u003c\u003cEOG\n[/Script/Pal.PalGameLocalSettings]\nAudioSettings=(Master=0.500000,BGM=1.000000,SE=1.000000,PalVoice=1.000000,HumanVoice=1.000000,Ambient=1.000000,UI=1.000000)\nGraphicsLevel=None\nDefaultGraphicsLevel=None\nbRunedBenchMark=False\nbHasAppliedUserSetting=False\nDedicatedServerName=${dedicated_server_name_hash}\nAntiAliasingType=AAM_TSR\nDLSSMode=Performance\nGraphicsCommonQuality=0\nEOG\n\n}\nhandle_start_from_backup() {\n    local start_from_backup=\"$1\"\n    local backup_files_storage_type=\"$2\"\n    local backup_files_local_path=\"$3\"\n    local backup_files_bootstrap_bucket_name=\"$4\"\n    local existing_backup_files_bootstrap_bucket_name=\"$5\"\n    local dedicatedservername=\"$6\"\n\n    echo \"[INFO] CHECKING FOR START_FROM_BACKUP OPTIONS\"\n    echo \"[INFO] start_from_backup SET TO $start_from_backup\"\n    echo \"[INFO] backup_files_storage_type SET TO $backup_files_storage_type\"\n    echo \"[INFO] backup_files_local_path SET TO $backup_files_local_path\"\n    echo \"[INFO] existing_backup_files_bootstrap_bucket_name SET TO $existing_backup_files_bootstrap_bucket_name\"\n    echo \"[INFO] dedicated_server_name_hash SET TO $dedicatedservername\"\n\n\n    if [[ $start_from_backup == \"true\" ]]; then\n        if [[ $backup_files_storage_type == \"local\" ]]; then\n            echo \"[INFO] backup_files_storage_type == local\"\n            create_gus\n            retrieve_obj_from_s3_backup_levelData \"$backup_files_bootstrap_bucket_name\" \"$dedicatedservername\"\n            retrieve_obj_from_s3_backup_playerData \"$backup_files_bootstrap_bucket_name/Players\" \"$dedicatedservername\"\n        elif [[ $backup_files_storage_type == \"s3\" ]]; then\n            echo \"[INFO] backup_files_storage_type == s3\"\n            create_gus\n            retrieve_obj_from_existing_s3_levelData \"$existing_backup_files_bootstrap_bucket_name\" \"$dedicatedservername\"\n            retrieve_obj_from_existing_s3_playerData \"$existing_backup_files_bootstrap_bucket_name/Players\" \"$dedicatedservername\"\n        else\n            echo \"Error: Invalid configuration for start_from_backup\"\n        fi\n    fi\n}\n\nif [[ ${start_from_backup} == \"true\" ]]; then\necho \"[INFO] START FROM EXISTING SAVE DATA/BACKUP REQUESTED FOR USE\"\nhandle_start_from_backup ${start_from_backup} ${backup_files_storage_type} ${backup_files_local_path} ${backup_files_bootstrap_bucket_name} ${existing_backup_files_bootstrap_bucket_name} ${dedicated_server_name_hash}\nfi\n\nif [[ ${use_custom_palworldsettings} == \"true\" ]]; then\necho \"[INFO] CUSTOM palworldsettings.INI REQUESTED FOR USE\"\nhandle_palworldsettings ${use_custom_palworldsettings} ${custom_palworldsettings_s3} ${custom_palworldsettings_github} ${palworldsettings_bucket_arn} ${github_url}\nfi\n\n\nchown -R steam:steam /palworld-server/Pal/Saved\nchmod -R 775 /palworld-server/Pal/Saved\n# Upload custom palworldsettings.ini if user has use_custom_palworldsettings true and game_user_settings_ini_path defined\n# %{ if use_custom_palworldsettings == \"true\" \u0026\u0026 custom_palworldsettings_s3 == \"true\" ~}\n# retrieve_obj_from_s3 \"${palworldsettings_bucket_arn}\"\n# %{ endif ~} \n# %{ if use_custom_palworldsettings == \"true\" \u0026\u0026 custom_palworldsettings_github == \"true\" ~}\n# retrieve_obj_from_github \"${palworldsettings_bucket_arn}\"\n# %{ endif ~}\n\n# Start and enable the PALWORLD service\nsystemctl daemon-reload\necho \"[INFO] ENABLING PALWORLD.SERVICE\"\nsystemctl enable palworld\necho \"[INFO] STARTING PALWORLD.SERVICE\"\nsystemctl start palworld\n\nif [[ ${enable_s3_backups} == \"true\" ]]; then\necho \"[INFO] S3 BBACKUPS ENABLED. CREATING /palworld-server/palworld_backup_script.sh\"\ncat \u003e /palworld-server/palworld_backup_script.sh \u003c\u003cEOD\n#!/bin/bash\n\n# Backup variables\nDIR_TO_BACKUP=\"/palworld-server/Pal/Saved/SaveGames\"\nGUS_BACKUP=\"/palworld-server/Pal/Saved/Config/LinuxServer/GameUserSettings.ini\"\nS3_BUCKET_NAME=\"${backup_s3_bucket_name}\"\n\ngenerate_timestamp() {\ndate '+%Y-%m-%d-%H-%M-%S'\n}\n\nTIMESTAMP=\"\\$(generate_timestamp)\"\nBACKUP_FILENAME=\"${server_name}_backup_\"\\$TIMESTAMP\".tar.gz\"\n\n# Create backup\necho \"[INFO] Creating palworld Backup\"\ntar -zcvf \"\\$BACKUP_FILENAME\" \"\\$DIR_TO_BACKUP\"\n\n# Upload backup to S3\necho \"[INFO] Uploading palworld Backup to s3\"\naws s3 cp \"\\$BACKUP_FILENAME\" s3://\"\\$S3_BUCKET_NAME\"/\naws s3 cp \"\\$GUS_BACKUP\" s3://\"\\$S3_BUCKET_NAME\"/\n\n# Remove local backup file\necho \"[INFO] Removing Local palworld Backup File\"\nrm \"\\$BACKUP_FILENAME\"\nEOD\n\nchmod +x /palworld-server/palworld_backup_script.sh\n\n(crontab -l -u steam 2\u003e/dev/null; echo \"${backup_interval_cron_expression} /palworld-server/palworld_backup_script.sh \u003e\u003e /palworld-server/palworld_backup_log.log 2\u003e\u00261\") | crontab -u steam -\nfi\n",
            "vars": {
              "active_unko": "false",
              "admin_password": "RockwellSucks",
              "auto_reset_guild_no_online_players": "false",
              "auto_reset_guild_time_no_online_players": "72",
              "backup_files_bootstrap_bucket_arn": "na",
              "backup_files_bootstrap_bucket_name": "na",
              "backup_files_local_path": "na",
              "backup_files_storage_type": "local",
              "backup_interval_cron_expression": "",
              "backup_s3_bucket_name": "",
              "ban_list_url": "https://api.palworldgame.com/api/banlist.txt",
              "base_camp_max_num": "128",
              "base_camp_worker_max_num": "15",
              "build_object_damage_rate": "1",
              "build_object_deterioration_damage_rate": "1",
              "can_pickup_other_guild_death_penalty_drop": "false",
              "collection_drop_rate": "1",
              "collection_object_hp_rate": "1",
              "collection_object_respawn_speed_rate": "1",
              "coop_player_max_num": "32",
              "custom_palworldsettings_github": "false",
              "custom_palworldsettings_s3": "false",
              "day_time_speed_rate": "1",
              "death_penalty": "1",
              "dedicated_server_name_hash": "na",
              "difficulty": "None",
              "drop_item_alive_max_hours": "1",
              "drop_item_max_num": "3000",
              "drop_item_max_num_unko": "100",
              "enable_aim_assist_keyboard": "false",
              "enable_aim_assist_pad": "true",
              "enable_defense_other_guild_player": "false",
              "enable_fast_travel": "true",
              "enable_friendly_fire": "false",
              "enable_invader_enemy": "true",
              "enable_non_login_penalty": "true",
              "enable_player_to_player_damage": "false",
              "enable_rcon": "false",
              "enable_s3_backups": "false",
              "enemy_drop_item_rate": "1",
              "exist_player_after_logout": "false",
              "existing_backup_files_bootstrap_bucket_arn": "na",
              "existing_backup_files_bootstrap_bucket_name": "na",
              "exp_rate": "1",
              "github_url": "",
              "guild_player_max_num": "20",
              "is_multiplay": "false",
              "is_pvp": "false",
              "is_start_location_select_by_map": "false",
              "night_time_speed_rate": "1",
              "pal_auto_hp_regen_rate": "1",
              "pal_auto_hp_regene_rate_in_sleep": "1",
              "pal_capture_rate": "1",
              "pal_damage_rate_attack": "1",
              "pal_damage_rate_defense": "1",
              "pal_egg_default_hatching_time": "72",
              "pal_spawn_num_rate": "1",
              "pal_stamina_decrease_rate": "1",
              "pal_stomach_decrease_rate": "1",
              "palworldsettings_bucket_arn": "na",
              "palworldsettings_ini_path": "",
              "player_auto_hp_regen_rate": "1",
              "player_auto_hp_regen_rate_in_sleep": "1",
              "player_damage_rate_attack": "1",
              "player_damage_rate_defense": "1",
              "player_stamina_decrease_rate": "1",
              "player_stomach_decrease_rate": "1",
              "public_ip": "",
              "public_port": "8211",
              "rcon_port": "",
              "region": "",
              "server_description": "Running On AWS",
              "server_name": "palworld-on-aws",
              "server_password": "RockwellSucks",
              "server_player_max_num": "32",
              "start_from_backup": "false",
              "use_auth": "true",
              "use_custom_palworldsettings": "false",
              "work_speed_rate": "1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "managed",
      "type": "aws_eip",
      "name": "palworld_server_ip",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-0506ad93d3593a5c0",
            "associate_with_private_ip": null,
            "association_id": "eipassoc-0db69d07281605803",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-0506ad93d3593a5c0",
            "instance": "i-0d7e313c6657af8c4",
            "network_border_group": "eu-west-3",
            "network_interface": "eni-0061bc64db1e13f53",
            "private_dns": "ip-10-0-1-26.eu-west-3.compute.internal",
            "private_ip": "10.0.1.26",
            "public_dns": "ec2-13-36-93-63.eu-west-3.compute.amazonaws.com",
            "public_ip": "13.36.93.63",
            "public_ipv4_pool": "amazon",
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.palworld.module.palworld_backup.aws_s3_bucket.palworld_backup_bucket",
            "module.palworld.module.palworld_backup.data.aws_caller_identity.current",
            "module.palworld.module.palworld_compute.aws_iam_instance_profile.instance_profile",
            "module.palworld.module.palworld_compute.aws_iam_role.instance_role",
            "module.palworld.module.palworld_compute.aws_instance.palworld_server",
            "module.palworld.module.palworld_compute.aws_key_pair.ssh_key",
            "module.palworld.module.palworld_compute.aws_s3_bucket.palworld",
            "module.palworld.module.palworld_compute.aws_s3_bucket.palworld_bootstrap",
            "module.palworld.module.palworld_compute.aws_s3_object.palworldsettings",
            "module.palworld.module.palworld_compute.data.aws_ami.ubuntu",
            "module.palworld.module.palworld_compute.data.aws_caller_identity.current",
            "module.palworld.module.palworld_compute.data.aws_region.current",
            "module.palworld.module.palworld_compute.data.template_file.user_data_template",
            "module.palworld.module.palworld_vpc.aws_security_group.palworld_security_group",
            "module.palworld.module.palworld_vpc.aws_subnet.palworld_subnet",
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "managed",
      "type": "aws_instance",
      "name": "palworld_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00b25a71c7cd9d9d8",
            "arn": "arn:aws:ec2:eu-west-3:905418249876:instance/i-0d7e313c6657af8c4",
            "associate_public_ip_address": false,
            "availability_zone": "eu-west-3a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 1
              }
            ],
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0d7e313c6657af8c4",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "palworld-ssh-key",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-0061bc64db1e13f53",
            "private_dns": "ip-10-0-1-26.eu-west-3.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.26",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 120,
                "kms_key_id": "",
                "tags": null,
                "throughput": 0,
                "volume_id": "vol-0fcb514b74f493c23",
                "volume_size": 40,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-01e6a02dd06ea00e8",
            "tags": {
              "Name": "palworld-on-aws"
            },
            "tags_all": {
              "Name": "palworld-on-aws"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "be27239a31accfb552b1f78782ab8de2f3f77a28",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-098e802a6e1e0f7eb"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.palworld.module.palworld_backup.aws_s3_bucket.palworld_backup_bucket",
            "module.palworld.module.palworld_backup.data.aws_caller_identity.current",
            "module.palworld.module.palworld_compute.aws_iam_instance_profile.instance_profile",
            "module.palworld.module.palworld_compute.aws_iam_role.instance_role",
            "module.palworld.module.palworld_compute.aws_key_pair.ssh_key",
            "module.palworld.module.palworld_compute.aws_s3_bucket.palworld",
            "module.palworld.module.palworld_compute.aws_s3_bucket.palworld_bootstrap",
            "module.palworld.module.palworld_compute.aws_s3_object.palworldsettings",
            "module.palworld.module.palworld_compute.data.aws_ami.ubuntu",
            "module.palworld.module.palworld_compute.data.aws_caller_identity.current",
            "module.palworld.module.palworld_compute.data.aws_region.current",
            "module.palworld.module.palworld_compute.data.template_file.user_data_template",
            "module.palworld.module.palworld_vpc.aws_security_group.palworld_security_group",
            "module.palworld.module.palworld_vpc.aws_subnet.palworld_subnet",
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "managed",
      "type": "aws_key_pair",
      "name": "ssh_key",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-3:905418249876:key-pair/palworld-ssh-key",
            "fingerprint": "d5:5b:03:04:e8:7c:cd:a2:d6:9f:0a:ad:5d:17:d2:e9",
            "id": "palworld-ssh-key",
            "key_name": "palworld-ssh-key",
            "key_name_prefix": "",
            "key_pair_id": "key-04fee273b42390bf5",
            "key_type": "rsa",
            "public_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCyzbwdRz4l8J3Gpe0ycfwyKQSsPpAFToSj6nT1V2pdxlyp8W9zUNNY3VRArfL1QQbpZ7MLZt1XI1Ds4jn1qfc1Nu077ij42dloU+Q++IOZeBtYILuBnligPiV0o8Phmu8gWmMHKm9GBZaxg79qLgt5nof6vyjHEPZe9Ja70P5EnvmEgjfG8/jjDCqtika49nKjO6QVbJr7x2CJjkiQgMbMvsnQclT3SPqAWj4cnzXUzzKJe+2yOeaIThMm2J0wzbDCGwhx38u6p6OlcLegdKXFD4aiSDtqyjSLrk/KHfdUSHo6dyyvhca+f8QkPIs1HY3mLHBxKNb7frF15O5EoYiaeCnXOMWkznER7oOnDknJxhHejRKysgYTsvQ7VnzYplTM4hdiFGQzho50INhn4D9I0AiVARYF1hKklTrlnZAGxChvfPyv9+DJqf0yqSIEEPNQnBeAaimYT83NBNo7yand87Zrb+Qv5TzwS2ABv3MQ7rn1IP4evjXgStR+u8YkDmwEUM2X4eMM/aEejKKANWl4cA/cv6t/VfXaWiuNCXhM+e24nQAsntdIqUqGTd9Eaw01qy4f7g8Bpaav3Rx4+QwQmr7uUm8XqgsKbYmsgg2nUqtPENTHhXkO7ZEz8GfU7XSsDtESdYlkJFBQnEj8AKzL23Hm2b1b/tTayAvyU9Nnlw== acebyte.technology@gmail.com",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_compute",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 22,
            "id": "sgrule-3510424349",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-098e802a6e1e0f7eb",
            "security_group_rule_id": "sgr-0ea46c81376ea4462",
            "self": false,
            "source_security_group_id": null,
            "timeouts": null,
            "to_port": 22,
            "type": "ingress"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.palworld.module.palworld_vpc.aws_security_group.palworld_security_group",
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_vpc",
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "palworld_igw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-3:905418249876:internet-gateway/igw-0fb718401839e0826",
            "id": "igw-0fb718401839e0826",
            "owner_id": "905418249876",
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0132dbc2824500bef"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "internet_gateway",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0fb718401839e0826",
            "id": "r-rtb-0b486a6e88afa177f1080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-0b486a6e88afa177f",
            "state": "active",
            "timeouts": null,
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.palworld.module.palworld_vpc.aws_internet_gateway.palworld_igw",
            "module.palworld.module.palworld_vpc.aws_route_table.palworld_route_table",
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "palworld_route_table",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-3:905418249876:route-table/rtb-0b486a6e88afa177f",
            "id": "rtb-0b486a6e88afa177f",
            "owner_id": "905418249876",
            "propagating_vgws": [],
            "route": [],
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0132dbc2824500bef"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "subnet_association",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-03bcb858e0b423c14",
            "route_table_id": "rtb-0b486a6e88afa177f",
            "subnet_id": "subnet-01e6a02dd06ea00e8",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.palworld.module.palworld_vpc.aws_route_table.palworld_route_table",
            "module.palworld.module.palworld_vpc.aws_subnet.palworld_subnet",
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_vpc",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "palworld_security_group",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-3:905418249876:security-group/sg-098e802a6e1e0f7eb",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [
                  "::/0"
                ],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-098e802a6e1e0f7eb",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 8211,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 8211
              }
            ],
            "name": "terraform-20240203211058827200000002",
            "name_prefix": "terraform-",
            "owner_id": "905418249876",
            "revoke_rules_on_delete": false,
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0132dbc2824500bef"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "palworld_subnet",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-3:905418249876:subnet/subnet-01e6a02dd06ea00e8",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "eu-west-3a",
            "availability_zone_id": "euw3-az1",
            "cidr_block": "10.0.1.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-01e6a02dd06ea00e8",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "905418249876",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0132dbc2824500bef"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.palworld.module.palworld_vpc.aws_vpc.palworld_vpc"
          ]
        }
      ]
    },
    {
      "module": "module.palworld.module.palworld_vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "palworld_vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-3:905418249876:vpc/vpc-0132dbc2824500bef",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-01b3558adb29dadb5",
            "default_route_table_id": "rtb-08fee172c414feb9b",
            "default_security_group_id": "sg-0b7c6d885b0daf162",
            "dhcp_options_id": "dopt-04d0417794ef0db30",
            "enable_dns_hostnames": false,
            "enable_dns_support": true,
            "enable_network_address_usage_metrics": false,
            "id": "vpc-0132dbc2824500bef",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-08fee172c414feb9b",
            "owner_id": "905418249876",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": [
    {
      "object_kind": "var",
      "config_addr": "module.palworld.module.palworld_compute.var.death_penalty",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.palworld.module.palworld_compute.var.death_penalty",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "resource",
      "config_addr": "module.palworld.module.palworld_vpc.aws_security_group.palworld_security_group",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.palworld.module.palworld_vpc.aws_security_group.palworld_security_group",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.palworld.var.death_penalty",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.palworld.var.death_penalty",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.palworld.var.backup_files_storage_type",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.palworld.var.backup_files_storage_type",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "resource",
      "config_addr": "module.palworld.module.palworld_compute.aws_instance.palworld_server",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.palworld.module.palworld_compute.aws_instance.palworld_server",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "resource",
      "config_addr": "module.palworld.module.palworld_compute.data.template_file.user_data_template",
      "status": "unknown",
      "objects": [
        {
          "object_addr": "module.palworld.module.palworld_compute.data.template_file.user_data_template",
          "status": "unknown"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.palworld.module.palworld_compute.var.backup_files_storage_type",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.palworld.module.palworld_compute.var.backup_files_storage_type",
          "status": "pass"
        }
      ]
    }
  ]
}
